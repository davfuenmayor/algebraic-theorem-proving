#!/usr/bin/env sage

import sys
from sage.all import *

def polysimp(poly_str, params_str, factorize):      
    R = eval(parse_params(params_str))
    poly = R(parse_poly(poly_str))
    simp_poly = simplify_exponents(R, poly)
    if factorize and poly != R.zero(): 
        return str(simp_poly.factor())
    else:        
        return str(simp_poly)
    
def parse_poly(poly_str):    
    poly_str = poly_str.replace("\n","").replace("\\","").strip() # undesired characters (sometimes generated by Isabelle)
    dot_index = poly_str.find('.')    
    if dot_index >= 0: # a dot in the expression: it might be on side of the polynomial (lhs) or not          
        if poly_str.find('<') <= 3: # the dot is on the lhs since in that case the expression starts with a symbol (after max. 3 parentheses)
            poly_str = poly_str[dot_index + 1:] # removes leading chars up to the first dot
    return poly_str.split("=")[0].split("<")[0].split(">")[0].replace("@", "").strip() # returns lhs of expression (and remove '@')       
    
def parse_params(s):
    params = s.strip().replace("''", "'") # escaping Isabelle encoded strings
    if params.startswith("["): # in case params is a list of strings: [template, placeholder1, placeholder2, ...]        
        params = eval(params)
        return params[0].format(*params[1:]).replace("|", "\"")         
    return params.replace("\'", "").replace("|", "\"") # since we must use '|' instead of single quotes in Isabelle

def simplify_exponents(ring, poly):
    order = ring.base_ring().order()
    vars = ring.gens()
    if hasattr(poly,'mod') and not order in [+Infinity,-Infinity]:
        for var in vars:            
            m = var**order - var            
            poly = poly.mod(m)
    return poly    

num_args = len(sys.argv)
if num_args <= 2:
    print("Usage: %s <polynomial> <params> <factorize=False>" % sys.argv[0])
    print("Simplifies/reduces a polynomial (equation) <polynomial> in a given ring <params[0]> wrt. the specified variables <params[1]>")
    sys.exit(1)

with open(os.getcwd()+"/python/debug.txt", 'w') as file:
    file.write("Command: " + str(sys.argv))

factorize = False
if num_args >= 4 and sys.argv[3].lower() in ['true', '1', 't', 'yes', 'y']:
   factorize = True

poly = sys.argv[1]
params = sys.argv[2]
print(polysimp(poly, params, factorize))