#!/usr/bin/env sage
import sys
from sage.all import *

def parse_params(s):
    params = s.strip().replace("''", "'") # escaping Isabelle encoded strings
    if params.startswith("["): # in case params is a list of strings: [template, placeholder1, placeholder2, ...]        
        params = eval(params)
        return params[0].format(*params[1:]).replace("{", "\"").replace("}", "\"")
    return params.replace("\'", "").replace("{", "\"").replace("}", "\"")

def polyimc(poly_str, params_str):      
    R = eval(parse_params(params_str))
    test,gens = parse_idm(poly_str)
    test_poly = R(test)
    gens_poly = list(map(lambda x: R(x), gens))          
    return imctest2(R,test_poly,gens_poly)

def imctest1(R, test, gens):
    return test in R.ideal(gens)

def imctest2(R, test, gens):    
    G = R.ideal(gens).groebner_basis() # compute the Gröbner basis for the ideal generated by gens
    reduced = test.reduce(G) # reduce wrt. the Gröbner basis    
    return reduced == R.zero() # checks whether the reduced polynomial is zero

def parse_idm(poly_str):    
    parts = poly_str.split("in")
    return parts[0].strip(), parts[1].replace("<","").replace(">","").strip().split(",")
    
with open(os.getcwd()+"/python/debug-poly_imc.txt", 'w') as file:
    file.write("Command: " + str(sys.argv))

if len(sys.argv) < 3:
    print("Usage: %s <params> <expression>" % sys.argv[0])
    print("Solves the ideal membership problem over a given ring <params[0]> wrt. the specified variables <params[1]>")
    sys.exit(1)

params = sys.argv[1]
poly = sys.argv[2]

print(polyimc(poly, params))