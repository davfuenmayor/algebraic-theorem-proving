#!/usr/bin/env sage
import sys
from sage.all import *

# Returns the list of 'splitting' polynomials: "x^q - x" for each variable x
def splitting_polynomials(ring):
    order = ring.base_ring().order()    
    if not order in [+Infinity,-Infinity]:
        return list(map(lambda x: x**order - x, ring.gens()))        
    return []

# Sanitizes and parses config strings of the form '<ring_type>(<field>, {<vars>})', e.g. 'PolynomialRing(GF(4), {x,y,z})'
def parse_params(s):
    params = s.strip().replace("''", "'") # escaping Isabelle encoded strings
    if params.startswith("["): # in case params is a list of strings: [template, placeholder1, placeholder2, ...]        
        params = eval(params)
        return params[0].format(*params[1:]).replace("{", "\"").replace("}", "\"")
    return params.replace("\'", "").replace("{", "\"").replace("}", "\"")

# Parses a ideal-membership-checking expression having the form 'test in <gen1, gen2, ...> '
def parse_imc_expr(expr_str):    
    parts = expr_str.split("in") # test polynomial on the lhs and ideal generators on the rhs
    return parts[0].strip(), parts[1].split('<')[1].split('>')[0].split(",")

# Checks whether a polynomial belongs to the ideal generated by some generators (modulo the field's 'splitting' polynomials)
def polyimc(imc_str, params_str):
    R = eval(parse_params(params_str))
    test_str,generator_str_list = parse_imc_expr(imc_str)
    test_poly = R(test_str)
    generators_polys = list(map(lambda x: R(x), generator_str_list))          
    ideal = R.ideal(generators_polys + splitting_polynomials(R))
    return imc_groebner(R,test_poly,ideal)

def imc_simple(R, poly, ideal):
    return poly in ideal # simple-minded (performant?)

def imc_groebner(R, poly, ideal):        
    reduced_poly = poly.reduce(ideal.groebner_basis()) # reduce wrt. the Gr√∂bner basis of the given ideal   
    return reduced_poly == R.zero() # checks whether the reduced polynomial is zero

with open(os.getcwd()+"/python/debug-poly_imc.txt", 'w') as file:
    file.write("Command: " + str(sys.argv))

if len(sys.argv) < 3:
    print("Usage: %s <params> <expression>" % sys.argv[0])
    print("Solves the ideal membership problem over a given ring <params[0]> wrt. the specified variables <params[1]>")
    sys.exit(1)

params = sys.argv[1]
poly = sys.argv[2]

print(polyimc(poly, params))